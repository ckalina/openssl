=pod

=head1 NAME

EVP_KDF-ARGON2 - The Argon2 EVP_KDF implementation

=head1 DESCRIPTION

Support for computing the B<argon2> password-based KDF through the B<EVP_KDF>
API.

The EVP_KDF-ARGON2 algorithm implements the Argon2 password-based key
derivation function, as described in IETF Argon2 draft.  It is memory-hard in
the sense that it deliberately requires a significant amount of RAM for efficient
computation. The intention of this is to render brute forcing of passwords on
systems that lack large amounts of main memory (such as GPUs or ASICs)
computationally infeasible.

=head2 Supported parameters

The supported parameters are:

=over 4

=item "pass" (B<OSSL_KDF_PARAM_PASSWORD>) <octet string>

=item "salt" (B<OSSL_KDF_PARAM_SALT>) <octet string>

=item "secret" (B<OSSL_KDF_PARAM_SECRET>) <octet string>

=item "iter" (B<OSSL_KDF_PARAM_ITER>) <unsigned integer>

These parameters work as described in L<EVP_KDF(3)/PARAMETERS>.

=item "t" (B<OSSL_KDF_PARAM_THREADS>) <unsigned integer>

The number of threads. This can only be used with built-in thread support.
Threading must be explicitly enabled. See EXAMPLES section for more information.

=item "s" (B<OSSL_KDF_PARAM_ARGON2_SZ>) <unsigned integer>

Digest length.

=item "a" (B<OSSL_KDF_PARAM_ARGON2_AD>) <octet string>

Optional associated data.

=item "l" (B<OSSL_KDF_PARAM_ARGON2_LANES>) <unsigned integer>

Number of lanes.

=item "m" (B<OSSL_KDF_PARAM_ARGON2_MEMCOST>) <unsigned integer>

Memory cost parameter (the number of 1k memory blocks used).

=item "v" (B<OSSL_KDF_PARAM_ARGON2_VERSION>) <unsigned integer>

Argon2 version. Supported values: 0x10, 0x13 (default).

=item "f1" (B<OSSL_KDF_PARAM_ARGON2_FLAG_CLEAR_PWD>) <unsigned integer>

If set (nonzero), B<OPENSSL_cleanse> is called on password during initial
hash phase.

=item "f2" (B<OSSL_KDF_PARAM_ARGON2_FLAG_CLEAR_SECRET>) <unsigned integer>

If set (nonzero), B<OPENSSL_cleanse> is called on secret during initial
hash phase.

=back

=head1 EXAMPLES

This example uses Argon2d with password "1234567890", salt "saltsalt",
using 2 lanes, 2 threads, and memory cost of 65536:

 EVP_KDF *kdf;
 EVP_KDF_CTX *kctx;
 unsigned char out[128];
 OSSL_PARAM params[6], *p = params;
 int threads = 2;
 int m_cost = 65536;

 kdf = EVP_KDF_fetch(NULL, "ARGON2D", NULL);
 kctx = EVP_KDF_CTX_new(kdf);
 EVP_KDF_free(kdf);

 CRYPTO_THREAD_enable(NULL, -1);
 if (CRYPTO_THREAD_enabled(NULL) == 0)
     return 0;

 *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_PASSWORD,
                                          (char *)"1234567890", 10);
 *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_SALT,
                                          (char *)"saltsalt", 8);
 *p++ = OSSL_PARAM_construct_int(OSSL_KDF_PARAM_THREADS, &threads);
 *p++ = OSSL_PARAM_construct_int(OSSL_KDF_PARAM_ARGON2_LANES, &threads);
 *p++ = OSSL_PARAM_construct_int(OSSL_KDF_PARAM_ARGON2_MEMCOST, &m_cost);
 *p = OSSL_PARAM_construct_end();

 if (EVP_KDF_CTX_set_params(kctx, p) <= 0) {
     error("EVP_KDF_CTX_set_params");
 }

 if (EVP_KDF_derive(kctx, out, sizeof(out)) <= 0) {
     error("EVP_KDF_derive");
 }

 EVP_KDF_CTX_free(kctx);

=head1 NOTES

"ARGON2I", "ARGON2D", and "ARGON2ID" are the names for this implementation; it
can be used with the EVP_KDF_fetch() function.

=head1 CONFORMING TO

draft-irtf-cfrg-argon2-11

=head1 SEE ALSO

L<EVP_KDF(3)>,
L<EVP_KDF_CTX_new(3)>,
L<EVP_KDF_CTX_free(3)>,
L<EVP_KDF_CTX_set_params(3)>,
L<EVP_KDF_derive(3)>,
L<EVP_KDF(3)/PARAMETERS>

=head1 HISTORY

This functionality was added to OpenSSL 3.0.

=head1 COPYRIGHT

Copyright 2020 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
